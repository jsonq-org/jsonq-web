<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>jsonq.org</title>
    <description>jsonq.org</description>
    <link>http://www.jsonq.org</link>
    <pubDate>2014-08-27</pubDate>
    <item>
      <title>Archive</title>
      <link>http://www.jsonq.org/archive</link>
      <description>
</description>
    </item>
    <item>
      <title>Categories</title>
      <link>http://www.jsonq.org/categories</link>
      <description>
&lt;ul class="tag_box inline"&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>JSONQ</title>
      <link>http://www.jsonq.org/</link>
      <description>&lt;h1 id="toc_0"&gt;What is JSONQ?&lt;/h1&gt;

&lt;p&gt;JSONQ is a JSON-based specification for data access and storage. All operations are, fundamentally,
able to be represented as &lt;a href="http://www.json.org" title="JSON"&gt;JSON&lt;/a&gt; documents. By using JSON messages to represent data operations,
JSONQ provides a flexible base layer for building asynchronous language bindings.&lt;/p&gt;

&lt;h1 id="toc_1"&gt;Language Bindings&lt;/h1&gt;

&lt;p&gt;JSONQ is a language-agnostic specification. If your language of choice can handle JSON, it can be
used with JSONQ-compliant data sources. Writing JSON queries is not going to save you any time,
however, so language bindings are expected to be used to fully leverage JSONQ.&lt;/p&gt;

&lt;p&gt;Some examples of possible bindings are provided below. This is the JSONQ query being demonstrated:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;from&amp;quot;: &amp;quot;Products&amp;quot;,
    &amp;quot;as&amp;quot;: &amp;quot;p&amp;quot;,
    &amp;quot;group&amp;quot;: {
        &amp;quot;by&amp;quot;: &amp;quot;p.category&amp;quot;,
        &amp;quot;into&amp;quot;: &amp;quot;cat&amp;quot;
    },
    &amp;quot;select&amp;quot;: {
        &amp;quot;category&amp;quot;: &amp;quot;cat.key&amp;quot;,
        &amp;quot;products&amp;quot;: &amp;quot;cat&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_2"&gt;Javascript&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var products = jsonq.getStore(&amp;quot;Products&amp;quot;);
products
    .as(&amp;quot;p&amp;quot;)
    .group(&amp;quot;p.category&amp;quot;, &amp;quot;cat&amp;quot;)
    .select(
        { &amp;quot;category&amp;quot;: &amp;quot;cat.key&amp;quot;,
          &amp;quot;products&amp;quot;: &amp;quot;cat&amp;quot; },
        function(results) {
            for (var i=0; i&amp;lt;results.length; i++) {
                var r = results[i];
                console.log(
                    &amp;quot;There are &amp;quot; + r.products.length +
                    &amp;quot; products in category &amp;#39;&amp;quot; + r.category+&amp;quot;&amp;#39;&amp;quot; );
            }
        }

    )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Pages</title>
      <link>http://www.jsonq.org/pages</link>
      <description>
&lt;ul&gt;
  
    &lt;li&gt;&lt;a href="/archive"&gt;Archive&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/categories"&gt;Categories&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/"&gt;JSONQ&lt;/a&gt;&lt;/li&gt;
  
    &lt;li class="active"&gt;&lt;a href="/pages" class="active"&gt;Pages&lt;/a&gt;&lt;/li&gt;
  
  
  
    &lt;li&gt;&lt;a href="/tags"&gt;Tags&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/about"&gt;about&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/examples"&gt;examples&lt;/a&gt;&lt;/li&gt;
  
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Tags</title>
      <link>http://www.jsonq.org/tags</link>
      <description>
&lt;ul class="tag_box inline"&gt;
&lt;/ul&gt;

 
</description>
    </item>
    <item>
      <title>about</title>
      <link>http://www.jsonq.org/about</link>
      <description>&lt;h1 id="toc_0"&gt;about JSONQ&lt;/h1&gt;
</description>
    </item>
    <item>
      <title>examples</title>
      <link>http://www.jsonq.org/examples</link>
      <description>&lt;h1 id="toc_0"&gt;JSONQ examples&lt;/h1&gt;

&lt;p&gt;The following example demonstrates a simple aggregation.&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Data&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[ 2, 2, 3, 5, 5 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_2"&gt;Request&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;distinct&amp;quot;: {
        &amp;quot;from&amp;quot;: &amp;quot;args[0]&amp;quot;,
        &amp;quot;as&amp;quot;: &amp;quot;n&amp;quot;,
        &amp;quot;select&amp;quot;: &amp;quot;count(n)&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="toc_3"&gt;Result&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;results&amp;quot;: [ 2, 3, 5 ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
  </channel>
</rss>
